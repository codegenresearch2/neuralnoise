import hashlib\"nimport json\"nimport logging\"nfrom pathlib import Path\"nfrom typing import Any, Literal\"nfrom pydub import AudioSegment, effects\"nfrom rich.progress import track\"n\"n# Set up logging\"nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\"nlogger = logging.getLogger(__name__)\"n\"n# Function to generate audio segment\"ndef generate_audio_segment(content: str, speaker: dict, output_path: Path) -> AudioSegment:\"n    ...\"n\"n# Function to create podcast episode from script\"ndef create_podcast_episode_from_script(script: dict, config: dict, output_dir: Path) -> AudioSegment:\"n    script_segments = []\"n    temp_dir = output_dir / "segments"\"n    temp_dir.mkdir(exist_ok=True)\"n    sections_ids = list(sorted(script["sections"].keys()))\"n    for section_id in sections_ids:\"n        for segment in script["sections"][section_id]["segments"]:\"n            script_segments.append((section_id, segment))\"n\"n    audio_segments = []\"n    for section_id, segment in track(script_segments, description="Generating audio segments...", total=len(script_segments)):\"n        speaker_settings = config["speakers"][segment["speaker"]]\"n        content = segment["content"].replace("¡", "").replace("¿", "")\"n        content_hash = hashlib.md5(content.encode("utf-8")).hexdigest()\"n        segment_path = temp_dir / f"{section_id}_{segment['id']}_{content_hash}.mp3"\"n        audio_segment = generate_audio_segment(content, speaker_settings, segment_path)\"n        audio_segments.append(audio_segment)\"n        if "blank_duration" in segment:\"n            silence = AudioSegment.silent(duration=segment["blank_duration"] * 1000)\"n            audio_segments.append(silence)\"n\"n    podcast = AudioSegment.empty()\"n    for chunk in audio_segments:\"n        podcast += chunk\"n    podcast = effects.normalize(podcast)\"n    return podcast\"n\"n# Main function to create podcast episode\"ndef create_podcast_episode(name: str, content: str, config: dict = None, config_path: str = None, format: Literal["wav", "mp3", "ogg"] = "wav", only_script: bool = False):\"n    output_dir = Path("output") / name\"n    output_dir.mkdir(parents=True, exist_ok=True)\"n    if config_path:\"n        logger.info("🔧  Loading configuration from %s", config_path)\"n        with open(config_path, "r") as f:\"n            config = json.load(f)\"n    if not config:\"n        raise ValueError("No studio configuration provided")\"n    script_path = output_dir / "script.json"\"n    if script_path.exists():\"n        logger.info("💬  Loading cached script")\"n        with open(script_path, "r") as f:\"n            script = json.load(f)\"n    else:\"n        logger.info("💬  Generating podcast script")\"n        # Assuming PodcastStudio and its generate_script method are defined elsewhere\"n        # studio = PodcastStudio(work_dir=output_dir, config=config)\"n        # script = studio.generate_script(content)\"n        # script_path.write_text(json.dumps(script, ensure_ascii=False))\"n    if only_script:\"n        return\"n    logger.info("🎙️  Recording podcast episode")\"n    podcast = create_podcast_episode_from_script(script, config, output_dir=output_dir)\"n    podcast_filepath = output_dir / f"output.{format}\